基本設計
　Main機能をDisplayデザインを考えながら抽出する
　Testabilityを考慮して、MVCで、かくmoduleをunitテストしやすい構造にする
　バッググラウンド再生をさせたいので、Serviceをくむことを考えた

Main機能
　Repeat再生機能（今回の一押し機能）
　再生機能
　一つ送り
　一つ戻し
　Meta表示
　Volume

Main機能のRepeat再生をどうするか考えた。その結果、学習テスト項目発見ー＞調査項目がClear (codeかくまえに、調査項目を学習して、codeしやすい情報があつめられた）

todoリストが出やすい。次に何をするのかが明確
Repeat機能の組み方を考え、その後、通常再生ー＞Repeat再生が始まるまでは、元のfileに対して再生をかけて、その間にdataコピーをすることを思いつく。
（紙が足りないので、白紙のページをはさみで切り取って横にもってきた）

ある区間のdataを元ファイルから抽出する（5秒〜10秒）のテストを書こうとしたが、5秒で開始するファイルを抽出するに変更（問題をより小さくした）

Tool
知覚が必要なテストに対して、強制的に音声を聞かせるテストコードはかけないだろうか？

repeatplayのテストをかいているが、デザインがあたまでまとまらなくなった。。。何をしたいのだろう。。。

デザインを整理してみることにした。

Repeatのtodoリストをつぶしているときに、clientー＞RP、MPを分けてよぶか、Client->RP(MPを内部でよんでる)
とするかまよった。designをつめて（シーケンス、簡単なクラス図）音声データの切り替えを行うので、それを隠蔽するため、後者を選んだ。
(onpaint()を連続で呼ぶ(onpaintの中でさらにinvalidを呼ぶ)と音声データの切り替えが不必要になるが、javaのUI threadを回しすぎるので止めた)

再度同じテストを開始してみる

次に、repeatPlayを行うと、repeat用のファイルをそのまま使うと、いつ繰り返されるのかが分からなくなることに気づく。startは５秒なのだが、
終了がいつで、いつ５秒が開始されるのかが分からなくなることに気づく。
再び学習テストで打開策がないか調査を開始する。

学習テストを引き続き行った。Ringtoneをつかっても、結局End Posがきても頭に戻ったことが分からず、progress barを追従させるにはループを細かくまわすしかない。
こうなると、file分割の意味がないので、結局ringtoneを使ってrepeat playを行うことをあきらめた。

repeatのstartとendの値をセットする関数をテストしようとおもったが、あまりにテスト結果が成功することが明確なので、
これら二つのテストはかかなかった。

調査に使ったテストケースを、改めて使うときもあるので、残しておいた方がよい。今回は、MPのRepeatに対して、
File指定とbyte指定でrepeatができたかどうかを再度確認する

fake itにより、すべてのソースがデザイン通にこのように動くはずだという軸をつくる。テストコードの実装確認（テスト用パラメータの設定は正しいかなど、例えば、１番目と２番目の引数に設定する値が間違っていないかなどの確認）、デザイン固めの両方が可能。
そしてrefactoringを開始する。
public int getCurrentPosition() {
		// TODO Auto-generated method stub
		count++;

		if (count == 1) {
			return 9000;
		} else if (count == 2) {
			return 9000;
		} else if (count == 3) {
			return 13000;
		} else if (count == 4) {
			return 12000;
		} else if (count == 5) {
			return 12000;
		} else {
			return 18000;
		}
	}

作業を終了するときに、次に何からはじめるかわかるようにわざとエラーを残した。
次回はstartRepeat()の実装から開始したいので、関数のbody内に"---"とかいて、build error状態にして、エクリプスを閉じた

startRepeat()の設計を開始。

1 frame のサンプリングが1024で、計算すると23msecほど。threadループを20msecくらいにする。maxでも20msecを超えない程度なので、
問題ないはず。もし問題でそうならthreadのループをより細かくしてみる。

急遽terminatableなthreadがほしくなったので、別ファイルでクラスを定義。
そこに対してTDDを開始。ListeningTrainPlayerのinner classにしようと
おもったのだが、inner classのテストが難しかったので外のファイルへ出してみた。
結構dependencyとしては独立された。MediaPlayerのインスタンスをいれられるようにした。

repeatの設計／実装を実施中に、いろいろなテストケースが浮かんでくる。紙にかくよりは直接ファイルに空テストケースを追加する。
紙にもどらなくてもよいので効率的におもえる。テスト実装は一つづつ実施していった。

テストをまわすサイクルは数秒とかと教科書に書いているが、実際には設計、実装中に設計の見直しを行う作業がはいるので、
数秒でまわして次の実装というわけにはいかない。ただ、試す（コード書いてテストでまわして確認）までは数秒程度のサイクルがここちよい。


==toolでこまったこと==
エミュレータ使ってもテストスタートが遅い。最初のテストロードで３０秒、次回からロードしても２０秒はかかっている。
各テストケース実施時にいちいちファイルをロード、消去するが、おそい。すべてのテストを開始する前にファイルのセットアップが終了するような機能がほしい。